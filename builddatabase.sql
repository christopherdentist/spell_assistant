-- MySQL Script generated by MySQL Workbench
-- Sun Jan 28 05:39:05 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sasp
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sasp
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sasp` DEFAULT CHARACTER SET utf8 ;
USE `sasp` ;

-- -----------------------------------------------------
-- Table `sasp`.`school`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`school` ;

CREATE TABLE IF NOT EXISTS `sasp`.`school` (
  `idschool` INT(8) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL DEFAULT 'newschool' COMMENT 'Name of the school, such as \"Evocation\".',
  PRIMARY KEY (`idschool`, `name`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `idschool_UNIQUE` (`idschool` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`spell`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`spell` ;

CREATE TABLE IF NOT EXISTS `sasp`.`spell` (
  `idspell` INT(8) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL DEFAULT 'blankspell' COMMENT 'Name of the spell, such as \"Telekinesis\".',
  `level` INT NOT NULL DEFAULT 0 COMMENT 'Level of the spell, 0-9 by default.\nNumbers <=0 are regarded as cantrips.',
  `verbal` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if the spell requires the caster to speak while casting the spell. If the caster is gagged or otherwise unable to say words, the spell will fail.\n0 if the spell has no verbal component.',
  `somatic` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if the spell requires movement in its casting. The caster must have at least one hand free to be able to cast the spell. Bound hands, duel wielding, or otherwise not having a free hand causes the spell to fail.\n0 if the spell does not have a somatic component.',
  `material` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if this spell requires a material component. To find the components involved, query the \"material\" table for this spell\'s ID.\n0 if this spell doesn\'t have a material component.',
  `description` TEXT NULL COMMENT 'Text description of this spell, as it appears in the player\'s handbook.',
  `range` DOUBLE NULL COMMENT 'Range of the spell in feet.',
  `rangeExtra` VARCHAR(128) NULL COMMENT 'Text corresponding to the range. For example, some spells have an additional radius specified in the range section, and that can be specified here.',
  `school` INT(8) NULL,
  PRIMARY KEY (`idspell`, `name`, `level`),
  INDEX `spellschool_idx` (`school` ASC),
  UNIQUE INDEX `idspell_UNIQUE` (`idspell` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  CONSTRAINT `spellschool`
    FOREIGN KEY (`school`)
    REFERENCES `sasp`.`school` (`idschool`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`material`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`material` ;

CREATE TABLE IF NOT EXISTS `sasp`.`material` (
  `idmaterial` INT(8) NOT NULL,
  `description` TEXT NOT NULL COMMENT 'Name of the material required, such as \"a yew branch\".',
  `cost` INT NOT NULL DEFAULT 0 COMMENT 'If these materials have a cost, enter its total value in CP here (1000CP=100SP=20EP=10GP=1PP). Any material with a cost cannot be substituted by a spellcasting focus.',
  `consumed` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if any of this material is consumed by the spell.\n0 if no material is consumed.',
  PRIMARY KEY (`idmaterial`),
  UNIQUE INDEX `idmaterial_UNIQUE` (`idmaterial` ASC),
  CONSTRAINT `spellmaterial`
    FOREIGN KEY (`idmaterial`)
    REFERENCES `sasp`.`spell` (`idspell`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`duration`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`duration` ;

CREATE TABLE IF NOT EXISTS `sasp`.`duration` (
  `idduration` INT(8) NOT NULL,
  `minuteDuration` INT NOT NULL DEFAULT 0 COMMENT 'The number of minutes a spell persists. A 2 hour long spell would have this column at \"120\". If the spell is\" Instantaneous\", this column will be valued at \"0\". Any oddities to the duration, such as ending early, are specified elsewhere, and this number should only represent the maximum duration.',
  `roundDuration` INT NOT NULL DEFAULT 0,
  `concentration` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if this spell requires concentration. Casting a new concentration spell, falling unconscious, or taking too much damage will cause a mage to \"lose concentration\", meaning the spell they\'re currently concentrating on will be cancelled.\n0 if the spell does not require concentration.',
  `extraText` VARCHAR(256) NULL COMMENT 'In the event that a spell has an irregular duration, that information will be specified here.',
  PRIMARY KEY (`idduration`),
  UNIQUE INDEX `idduration_UNIQUE` (`idduration` ASC),
  CONSTRAINT `spellduration`
    FOREIGN KEY (`idduration`)
    REFERENCES `sasp`.`spell` (`idspell`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`cost`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`cost` ;

CREATE TABLE IF NOT EXISTS `sasp`.`cost` (
  `idcost` INT(8) NOT NULL,
  `actionsMajor` INT NOT NULL DEFAULT 0 COMMENT 'Major actions required by the spell. Most spells cost 1 major action, meaning this column will be \"1\".',
  `actionsBonus` INT NOT NULL DEFAULT 0 COMMENT 'Bonus actions required by the spell. A few spells, such as \"Shield of Faith\", cost 1 bonus action, placing this column at \"1\".',
  `reactions` INT NOT NULL DEFAULT 0 COMMENT 'Number of reactions required by this spell. A select few spells, such as \"Shield\", cost 1 reaction, placing this column at \"1\".',
  `extraText` VARCHAR(256) NULL COMMENT 'Some spells, such as \"Hellish Rebuke\", can only be used in response to certain conditions. Those conditions can be speficied here, leaving this column as something like \"which you take in response to being damaged by a creature within 60 feet of you that you can see\"',
  `minutes` INT NOT NULL DEFAULT 0 COMMENT 'In the event that a spell takes substantial time to cast, that data can be entered here. For example, the spell \"Heroes\' Feast\" takes 10 minutes to cast, so this column would be entered as \"10\".',
  `ritual` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if the spell has a ritual form, meaning it can be cast for 10 minutes longer than normal but without the use of a spell slot.\n0 if the spell doesn\'t have a ritual form (default).',
  PRIMARY KEY (`idcost`),
  CONSTRAINT `spellcost`
    FOREIGN KEY (`idcost`)
    REFERENCES `sasp`.`spell` (`idspell`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`damage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`damage` ;

CREATE TABLE IF NOT EXISTS `sasp`.`damage` (
  `iddamage` INT(8) NOT NULL AUTO_INCREMENT,
  `spellreference` INT(8) NOT NULL,
  `instantaneous` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '1 if this damage amount occurs all on its first turn.\n0 if this damage occurs on second or later turns.',
  `dieType` INT NOT NULL DEFAULT 1 COMMENT 'Number of sides on the die being rolled. \"2d4\" would be entered in this column as \"4\". As this is used as a multiplier, a value of 1 (emulating a 1 sided die) should be used for flat damage.',
  `dieCount` INT NOT NULL DEFAULT 0 COMMENT 'Number of dice to roll. \"4d8 necrotic damage\" would put this column as a \"4\". In the case of flat damage, such as \"40 bludgeoning damage\", this column will be a \"40\".\nFor healing, enter negative numbers. \"Heals 6d8\" would have a \"-6\" in this column, with an \"8\" in the ',
  PRIMARY KEY (`iddamage`, `spellreference`),
  UNIQUE INDEX `iddamage_UNIQUE` (`iddamage` ASC),
  INDEX `spelldamage_idx` (`spellreference` ASC),
  CONSTRAINT `spelldamage`
    FOREIGN KEY (`spellreference`)
    REFERENCES `sasp`.`spell` (`idspell`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`type` ;

CREATE TABLE IF NOT EXISTS `sasp`.`type` (
  `idtype` INT(8) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL DEFAULT 'other' COMMENT 'The name of the type of damage. For example, \"Bludgeoning\".',
  PRIMARY KEY (`idtype`, `name`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `idtype_UNIQUE` (`idtype` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sasp`.`damagetotype`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sasp`.`damagetotype` ;

CREATE TABLE IF NOT EXISTS `sasp`.`damagetotype` (
  `iddamagetotype` INT(8) NOT NULL,
  `idtypetodamage` INT(8) NOT NULL COMMENT 'Foreign key to the damage name.',
  PRIMARY KEY (`iddamagetotype`, `idtypetodamage`),
  INDEX `ttd_idx` (`idtypetodamage` ASC),
  CONSTRAINT `dtt`
    FOREIGN KEY (`iddamagetotype`)
    REFERENCES `sasp`.`damage` (`iddamage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ttd`
    FOREIGN KEY (`idtypetodamage`)
    REFERENCES `sasp`.`type` (`idtype`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `sasp`;

DELIMITER $$

USE `sasp`$$
DROP TRIGGER IF EXISTS `sasp`.`spell_BEFORE_INSERT` $$
USE `sasp`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sasp`.`spell_BEFORE_INSERT` BEFORE INSERT ON `spell` FOR EACH ROW
BEGIN
	set new.verbal = ifnull(new.verbal, 0);
    set new.somatic = ifnull(new.somatic, 0);
    set new.material = ifnull(new.material, 0);
    set new.level = ifnull(new.level, 0);
END$$


USE `sasp`$$
DROP TRIGGER IF EXISTS `sasp`.`material_BEFORE_INSERT` $$
USE `sasp`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sasp`.`material_BEFORE_INSERT` BEFORE INSERT ON `material` FOR EACH ROW
BEGIN
	set new.description = ifnull(new.description, "newmaterial");
    set new.cost = ifnull(new.cost, 0);
    set new.consumed = ifnull(new.consumed, 0);
END$$


USE `sasp`$$
DROP TRIGGER IF EXISTS `sasp`.`duration_BEFORE_INSERT` $$
USE `sasp`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sasp`.`duration_BEFORE_INSERT` BEFORE INSERT ON `duration` FOR EACH ROW
BEGIN
	set new.minuteDuration = ifnull(new.minuteDuration, 0);
    set new.roundDuration = ifnull(new.roundDuration, 0);
    set new.concentration = ifnull(new.concentration, 0);
END$$


USE `sasp`$$
DROP TRIGGER IF EXISTS `sasp`.`cost_BEFORE_INSERT` $$
USE `sasp`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sasp`.`cost_BEFORE_INSERT` BEFORE INSERT ON `cost` FOR EACH ROW
BEGIN
	set new.actionsMajor = ifnull(new.actionsMajor, 0);
    set new.actionsBonus = ifnull(new.actionsBonus, 0);
    set new.reactions = ifnull(new.reactions, 0);
    set new.minutes = ifnull(new.minutes, 0);
    set new.ritual = ifnull(new.ritual, 0);
END$$


USE `sasp`$$
DROP TRIGGER IF EXISTS `sasp`.`damage_BEFORE_INSERT` $$
USE `sasp`$$
CREATE DEFINER = CURRENT_USER TRIGGER `sasp`.`damage_BEFORE_INSERT` BEFORE INSERT ON `damage` FOR EACH ROW
BEGIN
	set new.instantaneous = ifnull(new.instantaneous, 0);
    set new.dieType = ifnull(new.dieType, 1);
    set new.dieCount = ifnull(new.dieCount, 1);
END$$


DELIMITER ;
